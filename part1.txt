========================================Solution to 1.1: Getting started========================================
# Start 3 containers from image that does not automatically exit, such as nginx, detached.
Terminal 1: % docker container run nginx
Terminal 2: % docker container run httpd
Terminal 3: % docker container run zookeeper
Terminal 4: % docker container ps -a
CONTAINER ID   IMAGE       COMMAND                  CREATED              STATUS              PORTS                                    NAMES
622bb8f53a4c   httpd       "httpd-foreground"       About a minute ago   Up About a minute   80/tcp                                   elastic_rhodes
bf18afc1b0fb   zookeeper   "/docker-entrypoint.…"   About a minute ago   Up About a minute   2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp   stupefied_leavitt
943f1374f6a3   nginx       "/docker-entrypoint.…"   4 minutes ago        Up 4 minutes        80/tcp                                   nice_nightingale

# Stop 2 of the containers leaving 1 up.
Terminal 4: % docker container stop 622bb8f53a4c
Terminal 4: % docker container stop bf18afc1b0fb

# Submit the output for docker ps -a which shows 2 stopped containers and one running.
Terminal 4: % docker container ps -a
CONTAINER ID   IMAGE       COMMAND                  CREATED         STATUS                        PORTS     NAMES
622bb8f53a4c   httpd       "httpd-foreground"       4 minutes ago   Exited (0) 47 seconds ago               elastic_rhodes
bf18afc1b0fb   zookeeper   "/docker-entrypoint.…"   4 minutes ago   Exited (143) 36 seconds ago             stupefied_leavitt
943f1374f6a3   nginx       "/docker-entrypoint.…"   7 minutes ago   Up 7 minutes                  80/tcp    nice_nightingale

========================================Solution to 1.2: Cleanup========================================
# Clean the docker daemon from all images and containers.
Terminal 4: % docker container stop 943f1374f6a3
Terminal 4: % docker container prune

Terminal 4: % docker images
REPOSITORY   TAG       IMAGE ID       CREATED      SIZE
zookeeper    latest    043d5ff52cc5   5 days ago   278MB
httpd        latest    d54056386fbb   6 days ago   138MB
nginx        latest    87a94228f133   7 days ago   133MB
Terminal 4: % docker image rm 043d5ff52cc5 d54056386fbb 87a94228f133

# Submit the output for docker ps -a and docker images
Terminal 4: % docker container ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
Terminal 4: % docker images
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

========================================Solution to 1.3: Secret message========================================
Image devopsdockeruh/simple-web-service:ubuntu will start a container that outputs logs into a file.
Go inside the container and use tail -f ./text.log to follow the logs.
Every 10 seconds the clock will send you a “secret message”.
Submit the secret message and command(s) given as your answer.

# Start a container with the name of exercise13; -i (interactive), -t (tty) and -d (detached)
% docker run -d --name exercise13 devopsdockeruh/simple-web-service:ubuntu

# Enter in the container created above
% docker exec -it exercise13 sh
# tail -f ./text.log
Secret message is: 'You can find the source code here: https://github.com/docker-hy'
2021-10-19 14:14:07 +0000 UTC
2021-10-19 14:14:09 +0000 UTC
2021-10-19 14:14:11 +0000 UTC
2021-10-19 14:14:13 +0000 UTC
2021-10-19 14:14:15 +0000 UTC
Secret message is: 'You can find the source code here: https://github.com/docker-hy'
2021-10-19 14:14:17 +0000 UTC
2021-10-19 14:14:19 +0000 UTC
2021-10-19 14:14:20 +0000 UTC
2021-10-19 14:14:23 +0000 UTC
2021-10-19 14:14:25 +0000 UTC
Secret message is: 'You can find the source code here: https://github.com/docker-hy'

========================================Solution to 1.4: Missing dependencies========================================
# Start a ubuntu image with the process sh -c 'echo "Input website:"; read website; echo "Searching.."; sleep 1; curl http://$website;'
# Test inputting helsinki.fi into the application; and fix the ensuing problems.
% docker run -d -it --name exercise14 ubuntu sh -c 'apt-get update; apt-get install curl -y; echo "Input website:"; read website; echo "Searching.."; sleep 1; curl http://$website;' ; docker attach exercise14
........logs of installing curl here.......
Input website:
helsinki.fi
Searching..
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>301 Moved Permanently</title>
</head><body>
<h1>Moved Permanently</h1>
<p>The document has moved <a href="https://www.helsinki.fi/">here</a>.</p>
</body></html>

========================================Solution to 1.5: Sizes of images========================================
# Pull both images (devopsdockeruh/simple-web-service:ubuntu and devopsdockeruh/simple-web-service:alpine) and compare the image sizes.
% docker pull devopsdockeruh/simple-web-service:alpine
% docker pull devopsdockeruh/simple-web-service:ubuntu
% docker images
REPOSITORY                          TAG       IMAGE ID       CREATED        SIZE
devopsdockeruh/simple-web-service   ubuntu    4e3362e907d5   7 months ago   83MB
devopsdockeruh/simple-web-service   alpine    fd312adc88e0   7 months ago   15.7MB

# Go inside the alpine container and make sure the secret message functionality is the same.
Terminal 1: % docker run -d --name alpine devopsdockeruh/simple-web-service:alpine
Terminal 1: % docker exec -it alpine sh
/usr/src/app # tail -f ./text.log
Secret message is: 'You can find the source code here: https://github.com/docker-hy'
2021-10-21 11:37:07 +0000 UTC
2021-10-21 11:37:09 +0000 UTC
2021-10-21 11:37:11 +0000 UTC
2021-10-21 11:37:13 +0000 UTC
2021-10-21 11:37:15 +0000 UTC
Secret message is: 'You can find the source code here: https://github.com/docker-hy'

Terminal 2: % docker run -d --name ubuntu devopsdockeruh/simple-web-service:ubuntu
Terminal 2: % docker exec -it ubuntu sh
# tail -f /usr/src/app/text.log
2021-10-21 11:38:26 +0000 UTC
2021-10-21 11:38:28 +0000 UTC
Secret message is: 'You can find the source code here: https://github.com/docker-hy'
2021-10-21 11:38:30 +0000 UTC
2021-10-21 11:38:32 +0000 UTC
2021-10-21 11:38:34 +0000 UTC
2021-10-21 11:38:36 +0000 UTC
2021-10-21 11:38:38 +0000 UTC
Secret message is: 'You can find the source code here: https://github.com/docker-hy'

========================================Solution to 1.6: Hello Docker Hub========================================
Run docker run -it devopsdockeruh/pull_exercise.
It will wait for your input. Navigate through docker hub to find the docs and Dockerfile that was used to create the image.
Read the Dockerfile and/or docs to learn what input will get the application to answer a “secret message”.
Submit the secret message and command(s) given to get it as your answer.

# https://hub.docker.com/r/devopsdockeruh/pull_exercise
% docker run -it devopsdockeruh/pull_exercise
Unable to find image 'devopsdockeruh/pull_exercise:latest' locally
latest: Pulling from devopsdockeruh/pull_exercise
8e402f1a9c57: Pull complete
5e2195587d10: Pull complete
6f595b2fc66d: Pull complete
165f32bf4e94: Pull complete
67c4f504c224: Pull complete
Digest: sha256:7c0635934049afb9ca0481fb6a58b16100f990a0d62c8665b9cfb5c9ada8a99f
Status: Downloaded newer image for devopsdockeruh/pull_exercise:latest
Give me the password: basics
You found the correct password. Secret message is:
"This is the secret message"

========================================Solution to 1.7: Two line Dockerfile========================================
Create a Dockerfile and use FROM and CMD to create a brand new image through devopsdockeruh/simple-web-service:alpine that automatically runs the server and tag the new image as “web-server”.
Return the Dockerfile and the command you used to run the container.

% cat Dockerfile
From devopsdockeruh/simple-web-service:alpine
CMD server

% docker build . -t web-server

% docker images
REPOSITORY                          TAG       IMAGE ID       CREATED        SIZE
web-server                          latest    978fbf315695   7 months ago   15.7MB

% docker run web-server
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /*path                    --> server.Start.func1 (3 handlers)
[GIN-debug] Listening and serving HTTP on :8080

% docker container ps -a
CONTAINER ID   IMAGE                                      COMMAND                  CREATED          STATUS          PORTS     NAMES
e9fc6fdf78f4   web-server                                 "/usr/src/app/server…"   4 minutes ago    Up 4 minutes              confident_swartz

========================================Solution to 1.8: Image for script========================================
Create a Dockerfile for a new image that starts from ubuntu:18.04.
Make a script file on you local machine with such content as echo "Input website:"; read website; echo "Searching.."; sleep 1; curl http://$website;. 
Transfer this file to an image and run it inside the container using CMD. Build the image with tag “curler”.
Run the new curler image with the correct flags and input helsinki.fi into it. Output should match the 1.4 one.
Return both Dockerfile and the command you used to run the container.

% cat Dockerfile
From ubuntu:18.04
CMD apt-get update; apt-get install curl -y;echo "Input website:"; read website; echo "Searching.."; sleep 1; curl http://$website;

% docker build . -t curler

% docker images
REPOSITORY                          TAG       IMAGE ID       CREATED         SIZE
curler                              latest    42a9fa72871f   3 minutes ago   116MB

% docker run -it curler
........logs of installing curl here.......
Input website:
helsinki.fi
Searching..
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>301 Moved Permanently</title>
</head><body>
<h1>Moved Permanently</h1>
<p>The document has moved <a href="https://www.helsinki.fi/">here</a>.</p>
</body></html>

========================================Solution to 1.9: Volumes========================================s
Image devopsdockeruh/simple-web-service creates a timestamp every two seconds to /usr/src/app/text.log when it’s not given a command. 
Start the container with bind mount so that the logs are created into your filesystem.
Submit the command you used to complete the exercise.

Terminal 1: % touch /Users/yanjing/Desktop/text.log
Terminal 1: % tail -f /Users/yanjing/Desktop/text.log

Terminal 2: % docker run -v /Users/yanjing/Desktop/text.log:/usr/src/app/text.log devopsdockeruh/simple-web-service
Starting log output
Wrote text to /usr/src/app/text.log
Wrote text to /usr/src/app/text.log
...

Check the Terminal 1: % tail -f /Users/yanjing/Desktop/text.log
2021-10-21 12:59:55 +0000 UTC
2021-10-21 12:59:57 +0000 UTC
...

========================================Solution to 1.10: Ports open========================================
Image devopsdockeruh/simple-web-service will start a web service in port 8080 when given the command “server”.
From 1.7 you should have an image ready for this. Use -p flag to access the contents with your browser.
The output to your browser should be something like: { message: "You connected to the following path: ...
Submit your used commands for this exercise.

Terminal 1: % docker run -p 8080 web-server
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:	export GIN_MODE=release
 - using code:	gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /*path                    --> server.Start.func1 (3 handlers)
[GIN-debug] Listening and serving HTTP on :8080

Terminal 2: % docker container ps -a
CONTAINER ID   IMAGE                                      COMMAND                  CREATED             STATUS                     PORTS                     NAMES
3131fd344652   web-server                                 "/usr/src/app/server…"   54 seconds ago      Up 54 seconds              0.0.0.0:51957->8080/tcp   clever_hodgkin

Terminal 2: % curl 0.0.0.0:51957
{"message":"You connected to the following path: /","path":"/"}%

Terminal 1: % docker run -p 8080 web-server
...
[GIN] 2021/10/21 - 13:05:55 | 200 |       44.85µs |      172.17.0.1 | GET      "/"

========================================Solution to 1.11: Spring========================================
Create a Dockerfile for a Java Spring project: https://github.com/docker-hy/material-applications/tree/main/spring-example-project
Use openjdk image, You’ve completed the exercise when you see a ‘Success’ message in your browser.
Submit the Dockerfile you used to run the container.

% cat Dockerfile
FROM openjdk:latest
WORKDIR /var
COPY spring-example-project .
RUN ./mvnw package
CMD java -jar ./target/docker-example-1.1.3.jar

# The two parameters here --no-cache --progress=plain to print all the output during building image
% docker build . --no-cache --progress=plain -t spring

% docker images
REPOSITORY                          TAG       IMAGE ID       CREATED              SIZE
spring                              latest    08eaa65be484   About a minute ago   556MB

% docker run -it --name spring -p 8888:8080 spring

% docker container ps -a
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                    NAMES
1915ab5602bf   spring    "/bin/sh -c 'java -j…"   9 seconds ago   Up 8 seconds   0.0.0.0:8888->8080/tcp   spring

# This step needs to be operated through the brower
% curl 0.0.0.0:8888 
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">        <title>Spring</title>
        <meta charset="UTF-8" />

    </head>
    <body style="width: fit-content; padding-top: 3em; margin: auto;">
        <form action="/press" method="post">
            <button class="btn btn-info btn-outline-dark" type="submit">Press here</button>
        </form>
        <p style="width: fit-content; margin: auto;"></p>
    </body>
</html>

========================================Solution to 1.12: Hello, frontend!========================================
Clone, fork or download the project from https://github.com/docker-hy/material-applications/tree/main/example-frontend.
Create a Dockerfile for the project (example-frontend) and give a command so that the project runs in a docker container with port 5000 exposed and published 
so when you start the container and navigate to http://localhost:5000 you will see message if you’re successful.
Submit the Dockerfile.

# Here, I use apt-get cmd to install nodejs rather than the bash script
% cat Dockerfile
FROM debian:latest
ENV REACT_APP_BACKEND_URL http://127.0.0.1:8080/
COPY material-applications/example-frontend /var/example-frontend
WORKDIR /var/example-frontend
RUN apt-get update
RUN apt-get install curl gcc g++ make yarn nodejs npm -y
RUN npm -v & node -v
RUN npm install
RUN npm run build
RUN npm install -g serve
CMD serve -s -l 5000 build
EXPOSE 5000

% docker build . --no-cache --progress=plain -t example-frontend

% docker images
REPOSITORY                          TAG       IMAGE ID       CREATED          SIZE
example-frontend                    latest    7b9873fd2849   32 seconds ago   1.21GB

% docker run -it -p 5000:5000 --name example-frontend example-frontend

# Input "http://127.0.0.1:5000/" in the browser, and the following info can be seen.
Exercise 1.12: Congratulations! You configured your ports correctly!

========================================Solution to 1.13: Hello, backend!========================================
Clone, fork or download a project from https://github.com/docker-hy/material-applications/tree/main/example-backend.
Create a Dockerfile for the project (example-backend) and give a command so that the project runs in a docker container with port 8080 published.
When you start the container and navigate to http://localhost:8080/ping you should get a “pong” as response.
Submit the Dockerfile and the command used.

% cat Dockerfile
% cat Dockerfile
FROM debian:latest
ENV REQUEST_ORIGIN http://127.0.0.1:5000
COPY material-applications/example-backend /var/example-backend
WORKDIR /var/example-backend/
RUN apt-get update && apt-get install -y ca-certificates openssl
ARG cert_location=/usr/local/share/ca-certificates
RUN openssl s_client -showcerts -connect github.com:443 </dev/null 2>/dev/null|openssl x509 -outform PEM > ${cert_location}/github.crt
RUN openssl s_client -showcerts -connect proxy.golang.org:443 </dev/null 2>/dev/null|openssl x509 -outform PEM >  ${cert_location}/proxy.golang.crt
RUN update-ca-certificates
RUN apt-get install golang -y
RUN go build .
CMD ./server
EXPOSE 8080

% docker build . --no-cache --progress=plain -t example-backend

% docker images
REPOSITORY                          TAG       IMAGE ID       CREATED          SIZE
example-backend                     latest    7246870282f3   5 minutes ago    987MB

% docker run -it -p 8080:8080 --name example-backend example-backend

% curl -X GET 127.0.0.1:8080/ping
pong%

========================================Solution to 1.14: Environment========================================
Start both frontend-example and backend-example with correct ports exposed and add ENV to Dockerfile with necessary information from both READMEs (front,back).
Submit the edited Dockerfiles and commands used to run.

# Docker(frontend, exposed 5000)--> browser(localhost)<---Docker(Backend, exposed 8080)
# Repeat the steps in 1.12
# Repeat the steps in 1.13
# Input "http://127.0.0.1:5000/" in the browser, click "PRESS TO TEST!" button next to "Exercise 1.14" in the website, the following info can be seen:
"Success! Great job!"

# To summarize, an image name may consist of 3 parts plus a tag. Usually like the following: registry/organisation/image:tag. 